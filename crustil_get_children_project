#!/usr/bin/env bash

pom_path="./"
pom_name="pom.xml"
git_path_output="../"
git_repository_path=""
origin_url=$(git config --get remote.origin.url)
ssh_prefix=${origin_url//\/${PWD##*/}.git/}

usage() {
  echo -e "$0 <options>"
  echo ""
  echo -e "\t--pom-path=<path>\t\t\tpom path"
  echo -e "\t--pom-name=<path>\t\t\tpom name if differente of \"pom.xml\""
  echo -e "\t--git-output=<path>\t\t\toutput directory with ../ (link to parent)"
  echo ""
  echo -e "\t--clone\t\t\t\t\tclone git repository"
  echo -e "\t--pull\t\t\t\t\tpull git repository"
  echo -e "\t--fetch"
  echo -e "\t--stash"
  echo -e "\t--stash-apply"
  echo -e "\t--master\t\t\t\tcheckout to master"
  echo -e "\t--dev=<dev_branch>\t\t\tcheckout to <dev_branch>"
  echo -e "\t--update=<dev_branch>\t\t\tupdate dev_branch with master & keep work"
  echo -e "\t--status"
}

if [[ " $@ " == *" --help "* || " $@ " == *" -h "* || " $@ " == *"  "* ]]; then
  usage
  exit 0
fi

echo "+ set $origin_url"
echo "+ set $ssh_prefix"

if [[ " $@ " =~ --pom-path=([^' ']+) ]]; then
  echo "+ set pom path"
  pom_path=${BASH_REMATCH[1]}
fi

if [[ " $@ " =~ --pom-name=([^' ']+) ]]; then
  echo "+ set pom name"
  pom_name=${BASH_REMATCH[1]}
fi

if [[ " $@ " =~ --git-output=([^' ']+) ]]; then
  echo "+ set git output"
  # todo check if pom path parent exist !
  git_path_output="../${BASH_REMATCH[1]}"
fi

if [[ " $@ " =~ --git-tag=([^' ']+) ]]; then
  echo "+ set git tag"
  git_tag=${BASH_REMATCH[1]}
fi

modules=$(grep -oP '.*\K(?<=>).*(?=<\/module>)' pom.xml)
modules=${modules//..\//}

cmd() {
  for item in $modules; do
    echo "-> git $1 on $item"
    # check if item exist before action
    cd $git_path_output/$item
    git $1
  done
}

clone() {
  cd $git_path_output
  for item in $modules; do
    echo "-> git clone on $item"
    if [[ ${IS_PROD_MODE} == "TRUE" ]]; then
      rm -rf ${item}
    fi
    git clone ${ssh_prefix}/${item}.git
  done
}

if [[ " $@ " == *" --clone "* ]]; then
  clone
fi

if [[ " $@ " == *" --fetch "* ]]; then
  cmd "fetch"
fi

if [[ " $@ " == *" --pull "* ]]; then
  cmd "pull"
fi

if [[ " $@ " == *" --stash "* ]]; then
  cmd "stash"
fi

if [[ " $@ " == *" --stash-apply "* ]]; then
  cmd "stash apply"
fi

if [[ " $@ " == *" --master "* ]]; then
  cmd "checkout master"
fi

if [[ " $@ " =~ --dev=([^' ']+) ]]; then
  dev_branch=${BASH_REMATCH[1]}
  cmd "checkout ${dev_branch}"
fi

if [[ " $@ " =~ --update=([^' ']+) ]]; then
  dev_branch=${BASH_REMATCH[1]}
  for item in $modules; do
    echo "-> $item"
    cd $git_path_output/$item
    remote_branch=$(git branch --list ${dev_branch})
    if [[ $(git branch --list ${dev_branch}) != "" ]]; then
      echo "-> git stash on $item"
      git stash
      echo "-> git checkout master on $item"
      git checkout master
      echo "-> git pull on $item"
      git pull
      echo "-> git checkout $dev_branch on $item"
      git checkout $dev_branch
      echo "-> git merge master on $item"
      git merge master
      echo "-> git stash apply on $item"
      git stash apply
    fi
  done
  echo "-> done !"
fi

if [[ " $@ " == *" --status "* ]]; then
  cmd status
fi

if [[ " $@ " == *" --tag "* ]]; then
  if [[ "${git_tag}" == "" ]]; then
    echo "error git_tag not found !"
    exit -1
  fi
  echo "-> git tag ${git_tag}"
  git tag -a ${git_tag} -m ""
  cmd "tag -a ${git_tag} -m"
fi

# grep -oP '.*\K(?<=>).*(?=<\/)' pom.xml
